import telebot
import random
import time
import string
from telebot import types

TOKEN = '1313844607:AAETgl4Lx33MVRNY68b-VKGvNwx3zzFifkU'

bot = telebot.TeleBot(TOKEN)

PASSWORD_LENGTH = 8
PASSWORD_LOWERCASE_ALLOWED = True
PASSWORD_UPPERCASE_ALLOWED = False
PASSWORD_DIGITS_ALLOWED = True
PASSWORD_SYMBOLS_ALLOWED = False

def correctSettings():
    global PASSWORD_LOWERCASE_ALLOWED
    global PASSWORD_UPPERCASE_ALLOWED
    global PASSWORD_DIGITS_ALLOWED
    global PASSWORD_SYMBOLS_ALLOWED
    if PASSWORD_LOWERCASE_ALLOWED:
        return True
    if PASSWORD_UPPERCASE_ALLOWED:
        return True
    if PASSWORD_DIGITS_ALLOWED:
        return True
    if PASSWORD_SYMBOLS_ALLOWED:
        return True
    return False

def generate_password():
    global PASSWORD_LENGTH
    global PASSWORD_LOWERCASE_ALLOWED
    global PASSWORD_UPPERCASE_ALLOWED
    global PASSWORD_DIGITS_ALLOWED
    global PASSWORD_SYMBOLS_ALLOWED
    characters = ''
    if PASSWORD_LOWERCASE_ALLOWED:
        characters += string.ascii_lowercase
    if PASSWORD_UPPERCASE_ALLOWED:
        characters += string.ascii_uppercase
    if PASSWORD_DIGITS_ALLOWED:
        characters += string.digits
    if PASSWORD_SYMBOLS_ALLOWED:
        characters += string.punctuation
    password = ''.join([random.choice(characters) for n in range(PASSWORD_LENGTH)])
    return password

@bot.message_handler(commands=['start'])
def welcome_msg(message):
    msg_text = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n'
    msg_text += '–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª–∏.\n'
    msg_text += '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É\n'
    msg_text += '/generate'
    bot.send_message(message.chat.id, msg_text)

@bot.message_handler(commands=['generate'])
def menu(message):
    yes = '‚úÖ–î–∞'
    no = '‚ùå–ù–µ—Ç'
    msg_text = '–ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∏–∂–µ:\n\n\n'
    msg_text += f'–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è: {PASSWORD_LENGTH}\n\n'
    msg_text += f'üî° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞–ª–µ–Ω—å–∫–∏–µ –±—É–∫–≤—ã: {yes if PASSWORD_LOWERCASE_ALLOWED else no}\n\n'
    msg_text += f'üî† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –±—É–∫–≤—ã: {yes if PASSWORD_UPPERCASE_ALLOWED else no}\n\n'
    msg_text += f'üî¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã: {yes if PASSWORD_DIGITS_ALLOWED else no}\n\n'
    msg_text += f'üî£ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è: {yes if PASSWORD_SYMBOLS_ALLOWED else no}\n\n\n'
    msg_text += '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å"\n'
    msg_text += '–¢–∞–∫–∂–µ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.'

    allow = '‚úÖ–†–∞–∑—Ä–µ—à–∏—Ç—å'
    not_allow = '‚ùå–ó–∞–ø—Ä–µ—Ç–∏—Ç—å'
    markup = types.InlineKeyboardMarkup(row_width=1)
    button1 = types.InlineKeyboardButton('üîë–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—åüîê', callback_data='generate_password')
    button2 = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è', callback_data='edit_password_length')
    button3 = types.InlineKeyboardButton(f'{not_allow if PASSWORD_LOWERCASE_ALLOWED else allow} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞–ª–µ–Ω—å–∫–∏–µ –±—É–∫–≤—ã', callback_data='toggle_lowercase')
    button4 = types.InlineKeyboardButton(f'{not_allow if PASSWORD_UPPERCASE_ALLOWED else allow} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –±—É–∫–≤—ã', callback_data='toggle_uppercase')
    button5 = types.InlineKeyboardButton(f'{not_allow if PASSWORD_DIGITS_ALLOWED else allow} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã', callback_data='toggle_digits')
    button6 = types.InlineKeyboardButton(f'{not_allow if PASSWORD_SYMBOLS_ALLOWED else allow} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è', callback_data='toggle_symbols')

    markup.add(button1, button2, button3, button4, button5, button6)
    bot.send_message(message.chat.id, msg_text, reply_markup=markup)

@bot.message_handler(content_types=['text'])
def password_length(message):
    global PASSWORD_LENGTH
    if message.text.isdigit() == True:
        pass_length = int(message.text)
        if pass_length < 4 or pass_length > 32:
            bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 4 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤.')
        else:
            PASSWORD_LENGTH = pass_length
            menu(message)
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∑–∞–Ω–æ–≤–æ.')

@bot.callback_query_handler(func=lambda call: True)
def generator_settings(call):
    global PASSWORD_LOWERCASE_ALLOWED
    global PASSWORD_UPPERCASE_ALLOWED
    global PASSWORD_DIGITS_ALLOWED
    global PASSWORD_SYMBOLS_ALLOWED
    bot.delete_message(call.message.chat.id, call.message.message_id)
    if call.data == 'generate_password':
        if not correctSettings():
            bot.send_message(call.message.chat.id, '–û—à–∏–±–∫–∞! –í–∞–º –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —Ö–æ—Ç—è –±—ã 1 –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å!')
        else:
            password = generate_password()
            bot.send_message(call.message.chat.id, f'–í–æ—Ç –≤–∞—à –ø–∞—Ä–æ–ª—å:\n{password}')
    elif call.data == 'edit_password_length':
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 4 –¥–æ 32).')
    elif call.data == 'toggle_lowercase':
        PASSWORD_LOWERCASE_ALLOWED = not PASSWORD_LOWERCASE_ALLOWED
        menu(call.message)
    elif call.data == 'toggle_uppercase':
        PASSWORD_UPPERCASE_ALLOWED = not PASSWORD_UPPERCASE_ALLOWED
        menu(call.message)
    elif call.data == 'toggle_digits':
        PASSWORD_DIGITS_ALLOWED = not PASSWORD_DIGITS_ALLOWED
        menu(call.message)
    elif call.data == 'toggle_symbols':
        PASSWORD_SYMBOLS_ALLOWED = not PASSWORD_SYMBOLS_ALLOWED
        menu(call.message)

bot.polling(none_stop=True)